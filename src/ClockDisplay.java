
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author david
 */
public class ClockDisplay extends javax.swing.JFrame {
    private ProjectList myList;
    private Clock myClock;
    
    /**
     * Creates new form ClockDisplay
     */
    public ClockDisplay(Clock myClock) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClockDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClockDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClockDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClockDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        myList = new ProjectList(myClock);
        this.myClock = myClock;
        initComponents();
        
        addWindowListener(new WindowAdapter() {
           public void windowClosing(WindowEvent e) {
               close();
           } 
        });
        
        setVisible(true);
        new ClockHeart().run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockPanel = new ClockPanel();
        optionPanel = new javax.swing.JPanel();
        clockOutButton = new javax.swing.JButton();
        clockInButton = new javax.swing.JButton();
        projectSelection = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Time Clock");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(76, 76, 76));
        setMinimumSize(new java.awt.Dimension(200, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        clockPanel.setBorder(null);

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        getContentPane().add(clockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 160));

        optionPanel.setBorder(null);
        optionPanel.setPreferredSize(new java.awt.Dimension(200, 176));

        clockOutButton.setText("Clock Out");
        clockOutButton.setToolTipText("Clock out?");
        clockOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clockOutButtonMouseClicked(evt);
            }
        });
        clockOutButton.setEnabled(myClock.isClockedIn());

        clockInButton.setText("Clock In");
        clockInButton.setToolTipText("Clock In?");
        clockInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clockInButtonMouseClicked(evt);
            }
        });
        clockInButton.setEnabled(!myClock.isClockedIn());

        projectSelection.setModel(myList);
        projectSelection.setToolTipText("Select your money maker!");

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionPanelLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clockInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clockOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(projectSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clockInButton)
                .addGap(18, 18, 18)
                .addComponent(clockOutButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        clockOutButton.getAccessibleContext().setAccessibleName("");

        getContentPane().add(optionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 0, 210, 160));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clockInButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockInButtonMouseClicked
        boolean clockedIn = myClock.clockIn();
        
        clockOutButton.setEnabled(clockedIn);
        clockInButton.setEnabled(!clockedIn);
    }//GEN-LAST:event_clockInButtonMouseClicked

    private void clockOutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockOutButtonMouseClicked
        boolean clockedOut = myClock.clockOut();
        
        clockOutButton.setEnabled(!clockedOut);
        clockInButton.setEnabled(clockedOut);
    }//GEN-LAST:event_clockOutButtonMouseClicked

    private void close() {
        if(myClock.isClockedIn()) {
            myClock.clockOut();
        }
        
        System.exit(0);
    }
    
    public class ProjectList extends AbstractListModel implements ComboBoxModel {
        String[] projects = {"SoftwareMedia.com", "zaZing.com"};
        String selected = "SoftwareMedia.com";
        
        public ProjectList(Clock myClock) {
            projects = myClock.getProjects();
            selected = myClock.getMainProject();
        }
        
        public Object getElementAt(int index) {
            return projects[index];
        }
        
        public int getSize() {
            return projects.length;
        }
        
        public void setSelectedItem(Object item) {
            selected = (String)item;
        }
        
        public Object getSelectedItem() {
            return selected;
        }
    }
    
    public class ClockPanel extends JPanel {
        private DateFormat df;
        private Date date;

        public ClockPanel() {
            df = new SimpleDateFormat("HH:mm");
            date = new Date();
        }
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            ImageIcon iconHolder = null;
            double sizeChange = 2.5;
            int heightOffset = 0;
            int offset = 0;
            date = new Date();

            for(char image : df.format(date).toCharArray()) {
                switch(image) {
                    case '0': iconHolder = new ImageIcon(getClass().getResource("images/0.gif"));
                              break;
                    case '1': iconHolder = new ImageIcon(getClass().getResource("images/1.gif"));
                              break;
                    case '2': iconHolder = new ImageIcon(getClass().getResource("images/2.gif"));
                              break;
                    case '3': iconHolder = new ImageIcon(getClass().getResource("images/3.gif"));
                              break;
                    case '4': iconHolder = new ImageIcon(getClass().getResource("images/4.gif"));
                              break;
                    case '5': iconHolder = new ImageIcon(getClass().getResource("images/5.gif"));
                              break;
                    case '6': iconHolder = new ImageIcon(getClass().getResource("images/6.gif"));
                              break;
                    case '7': iconHolder = new ImageIcon(getClass().getResource("images/7.gif"));
                              break;
                    case '8': iconHolder = new ImageIcon(getClass().getResource("images/8.gif"));
                              break;
                    case '9': iconHolder = new ImageIcon(getClass().getResource("images/9.gif"));
                              break;
                    case ':': iconHolder = new ImageIcon(getClass().getResource("images/colon.gif"));
                              break;
                }

                heightOffset = (int)((getHeight() - (iconHolder.getIconHeight() * sizeChange)) / 3);
                Image img = iconHolder.getImage();
                g.drawImage(img, offset, heightOffset, (int)(iconHolder.getIconWidth() * sizeChange), (int)(iconHolder.getIconHeight() * sizeChange), null);
                offset += (int)(iconHolder.getIconWidth() * sizeChange);
            }

        }
    }
    
    public class ClockHeart extends Thread {
        public void run() {
            try {
                while (true) {
                    repaint();
                    Thread.sleep(1000);
                }
            } catch (InterruptedException ie) {
                System.err.println("ClockHeart: " + ie);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clockInButton;
    private javax.swing.JButton clockOutButton;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JComboBox projectSelection;
    // End of variables declaration//GEN-END:variables
}
